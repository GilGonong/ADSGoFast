{
  "name": "GPL_SparkNotebookExecution_FunctionActivity_Azure",
  "properties": {
    "activities": [
      {
        "dependsOn": [
          {
            "activity": "Poll For Statement Execution",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "name": "IsPurviewEnabled",
        "type": "IfCondition",
        "typeProperties": {
          "expression": {
            "type": "Expression",
            "value": "@not(or(equals(string(json(string(pipeline().parameters.TaskObject)).ExecutionEngine.JsonProperties.PurviewAccountName), ''), equals(string(json(string(pipeline().parameters.TaskObject)).TMOptionals.Purview), 'Disabled')))\n"
          },
          "ifTrueActivities": [
            {
              "dependsOn": [],
              "name": "PrepareMetaData",
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "SynapseNotebook",
              "typeProperties": {
                "notebook": {
                  "referenceName": "PrepareMetaData",
                  "type": "NotebookReference"
                },
                "parameters": {
                  "TaskObject": {
                    "type": "string",
                    "value": {
                      "type": "Expression",
                      "value": "@string(pipeline().parameters.TaskObject)"
                    }
                  }
                },
                "snapshot": true,
                "sparkPool": {
                  "referenceName": "adsdevsynspads",
                  "type": "BigDataPoolReference"
                }
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "PrepareMetaData",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Set Purview Metadata",
              "type": "SetVariable",
              "typeProperties": {
                "value": {
                  "type": "Expression",
                  "value": "@activity('PrepareMetaData').output.status.Output.result.exitValue"
                },
                "variableName": "OutputMetaData"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Set Purview Metadata",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "linkedServiceName": {
                "referenceName": "SLS_AzureFunctionApp",
                "type": "LinkedServiceReference"
              },
              "name": "PassMetaDataToPurview",
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "AzureFunctionActivity",
              "typeProperties": {
                "body": {
                  "type": "Expression",
                  "value": "@json(variables('OutputMetaData'))"
                },
                "functionName": "PurviewGetMetaData",
                "method": "POST"
              },
              "userProperties": []
            }
          ]
        },
        "userProperties": []
      },
      {
        "dependsOn": [
          {
            "activity": "Poll For Session Allocation",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "name": "Poll For Statement Execution",
        "type": "Until",
        "typeProperties": {
          "activities": [
            {
              "dependsOn": [
                {
                  "activity": "Check Statement State",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Mark Notebook Execution Complete After Polling",
              "type": "SetVariable",
              "typeProperties": {
                "value": {
                  "type": "Expression",
                  "value": "@if(\n    equals(\n            activity('Check Statement State').output.Result,\n            'available'\n        ),\n        bool('true'),\n        bool('false')\n    )"
                },
                "variableName": "NotebookExecutionComplete"
              },
              "userProperties": []
            },
            {
              "dependsOn": [],
              "linkedServiceName": {
                "referenceName": "SLS_AzureFunctionApp",
                "type": "LinkedServiceReference"
              },
              "name": "Check Statement State",
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "AzureFunctionActivity",
              "typeProperties": {
                "body": {
                  "type": "Expression",
                  "value": "@activity('Execute Notebook Using Function2').output"
                },
                "functionName": "CheckSynapseStatementExecution",
                "method": "POST"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Mark Notebook Execution Complete After Polling",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Wait1",
              "type": "Wait",
              "typeProperties": {
                "waitTimeInSeconds": {
                  "type": "Expression",
                  "value": "@if(\n    equals(\n            activity('Check Statement State').output.Result,\n            'available'\n        ),\n        1,\n        10\n    )"
                }
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Mark Notebook Execution Complete After Polling_copy1",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Fail1",
              "type": "Fail",
              "typeProperties": {
                "errorCode": "0",
                "message": "Checking Statement State failed"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Check Statement State",
                  "dependencyConditions": [
                    "Failed"
                  ]
                }
              ],
              "name": "Mark Notebook Execution Complete After Polling_copy1",
              "type": "SetVariable",
              "typeProperties": {
                "value": {
                  "type": "Expression",
                  "value": "@bool('true')"
                },
                "variableName": "NotebookExecutionComplete"
              },
              "userProperties": []
            }
          ],
          "expression": {
            "type": "Expression",
            "value": "@equals(\n    variables('NotebookExecutionComplete'),\n    bool('true')\n)"
          },
          "timeout": "7.00:00:00"
        },
        "userProperties": []
      },
      {
        "dependsOn": [],
        "name": "Poll For Session Allocation",
        "type": "Until",
        "typeProperties": {
          "activities": [
            {
              "dependsOn": [
                {
                  "activity": "Execute Notebook Using Function2",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Mark Session Allocation Complete After Polling",
              "type": "SetVariable",
              "typeProperties": {
                "value": {
                  "type": "Expression",
                  "value": "@if(\n    equals(\n        activity('Execute Notebook Using Function2').output.StatementResult,\n        2),\n    bool('true'),\n    bool('false')\n    )"
                },
                "variableName": "SessionAllocationComplete"
              },
              "userProperties": []
            },
            {
              "dependsOn": [],
              "linkedServiceName": {
                "referenceName": "SLS_AzureFunctionApp",
                "type": "LinkedServiceReference"
              },
              "name": "Execute Notebook Using Function2",
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "AzureFunctionActivity",
              "typeProperties": {
                "body": {
                  "type": "Expression",
                  "value": "@pipeline().parameters.TaskObject"
                },
                "functionName": "ExecuteSynapseNotebook",
                "method": "POST"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Mark Session Allocation Complete After Polling",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Wait1_copy1",
              "type": "Wait",
              "typeProperties": {
                "waitTimeInSeconds": 10
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Mark Session Allocation Failed After Polling",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Fail1_copy1",
              "type": "Fail",
              "typeProperties": {
                "errorCode": "0",
                "message": "Session Allocation Usines Function Failed"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Execute Notebook Using Function2",
                  "dependencyConditions": [
                    "Failed"
                  ]
                }
              ],
              "name": "Mark Session Allocation Failed After Polling",
              "type": "SetVariable",
              "typeProperties": {
                "value": {
                  "type": "Expression",
                  "value": "@bool('true')"
                },
                "variableName": "SessionAllocationComplete"
              },
              "userProperties": []
            }
          ],
          "expression": {
            "type": "Expression",
            "value": "@equals(\n    variables('SessionAllocationComplete'),\n    bool('true')\n)"
          },
          "timeout": "7.00:00:00"
        },
        "userProperties": []
      }
    ],
    "annotations": [],
    "folder": {
      "name": "ADS Go Fast/Data Movement/ExecuteNotebook/Azure/"
    },
    "lastPublishTime": "2022-04-06T03:50:37Z",
    "parameters": {
      "TaskObject": {
        "type": "object"
      }
    },
    "variables": {
      "NotebookExecutionComplete": {
        "defaultValue": false,
        "type": "Boolean"
      },
      "OutputMetaData": {
        "type": "String"
      },
      "SessionAllocationComplete": {
        "defaultValue": false,
        "type": "Boolean"
      }
    }
  },
  "type": "Microsoft.Synapse/workspaces/pipelines"
}
